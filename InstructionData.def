// Instruction opcodes are 8 or 16 bits wide
// the lowest bit denotes if it is typed or not
// Odd opcodes are typed 
// even opcodes are untyped
// when the opcodes are typed then they will automatically be a minimum of two bytes in this new design 
// with some previously two byte ops now being three bytes
// Typed opcodes look like this { 1 | op: 7 | imm:1 | type:2 | unused:1 | dest:4 }
// Typed opcodes with the immediate bit set will be longer, they will be 
// Untyped opcodes look like this { 0 | op:7 }
UntypedOpcode(Nop, One, NoArguments)
TypedOpcode(Add, Three, ThreeRegister, Number)
TypedOpcode(Subtract, Three, ThreeRegister, Number)
TypedOpcode(Multiply, Three, ThreeRegister, Number)
TypedOpcode(Divide, Three, ThreeRegister, Number)
TypedOpcode(Modulo, Three, ThreeRegister, Number)
TypedOpcode(Not, Three, TwoRegister, Number)
TypedOpcode(Minus, Three, TwoRegister, Number)
TypedOpcode(And, Three, ThreeRegister, Number)
TypedOpcode(Or, Three, ThreeRegister, Number)
TypedOpcode(GreaterThan, Three, ThreeRegister, Number)
TypedOpcode(LessThan, Three, ThreeRegister, Number)
TypedOpcode(Xor, Three, ThreeRegister, Number)
TypedOpcode(ShiftRight, Three, ThreeRegister, Number)
TypedOpcode(ShiftLeft, Three, ThreeRegister, Number)
TypedOpcode(Equals, Three, ThreeRegister, Number)
TypedOpcode(Pow, Three, ThreeRegister, Number)
//TypedOpcode(AddUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(SubtractUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(MultiplyUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(DivideUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(ModuloUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(NotUnsigned, Two, TwoRegister, MemoryAddress)
//TypedOpcode(MinusUnsigned, Two, TwoRegister, MemoryAddress)
//TypedOpcode(AndUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(OrUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(GreaterThanUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(LessThanUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(XorUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(ShiftRightUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(ShiftLeftUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(EqualsUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(PowUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(FloatingPointAdd, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointSubtract, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointMultiply, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointDivide, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointMinus, Two, TwoRegister, FloatingPoint)
//TypedOpcode(FloatingPointGreaterThan, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointLessThan, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointEquals, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointPow, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(NotBoolean, Two, TwoRegister, Boolean)
//TypedOpcode(AndBoolean, Three, ThreeRegister, Boolean)
//TypedOpcode(OrBoolean, Three, ThreeRegister, Boolean)
//TypedOpcode(XorBoolean, Three, ThreeRegister, Boolean)
//TypedOpcode(EqualsBoolean, Three, ThreeRegister, Boolean)
TypedOpcode(AddImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(SubtractImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(MultiplyImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(DivideImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(ModuloImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(AndImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(OrImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(GreaterThanImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(LessThanImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(XorImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(ShiftRightImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(ShiftLeftImmediate, Four, TwoRegisterWithImm16, Number)
TypedOpcode(EqualsImmediate, Four, TwoRegisterWithImm16, Number)
//TypedOpcode(UnsignedAddImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedSubtractImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedMultiplyImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedDivideImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedModuloImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedAndImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedOrImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedGreaterThanImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedLessThanImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedXorImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedShiftRightImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedShiftLeftImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedEqualsImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
TypedOpcode(TypeValue, Two, TwoRegister, Number)
//TypedOpcode(UnsignedTypeValue, Two, TwoRegister, MemoryAddress)
//TypedOpcode(FloatingPointTypeValue, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(BooleanTypeValue, Two, TwoRegister, Boolean)
UntypedOpcode(Jump, Three, SignedImm16)
UntypedOpcode(JumpIndirect, Two, TwoRegister)
UntypedOpcode(JumpAbsolute, Four, Imm24)
UntypedOpcode(CallSubroutine, Three, SignedImm16)
UntypedOpcode(CallSubroutineIndirect, Two, OneRegister)
UntypedOpcode(ReturnSubroutine, One, NoArguments)
UntypedOpcode(ConditionalBranch, Four, OneRegisterWithImm16)
UntypedOpcode(ConditionalBranchIndirect, Two, TwoRegister)
UntypedOpcode(ConditionalCallSubroutine, Four, OneRegisterWithImm16)
UntypedOpcode(ConditionalCallSubroutineIndirect, Two, TwoRegister)
UntypedOpcode(ConditionalReturnSubroutine, Two, OneRegister)
// type field manipulation
UntypedOpcode(DecodeBits, Three, FourRegister)
UntypedOpcode(EncodeBits, Four, FiveRegister)
//UntypedOpcode(LoadHalfAddress, Two, TwoRegister)
//UntypedOpcode(LoadQuarterAddress, Two, TwoRegister)
//UntypedOpcode(LoadByte, Two, TwoRegister)
//UntypedOpcode(StoreByte, Two, TwoRegister)
//UntypedOpcode(StoreHalfAddress, Two, TwoRegister)
//UntypedOpcode(StoreQuarterAddress, Two, TwoRegister)
UntypedOpcode(Load, Two, TwoRegister)
UntypedOpcode(Store, Two, TwoRegister)
UntypedOpcode(LoadImmediate16, Four, LoadImm16)
UntypedOpcode(LoadImmediate32, Six, LoadImm32)
UntypedOpcode(LoadImmediate48, Eight, LoadImm48)
UntypedOpcode(LoadImmediate64, Ten, LoadImm64)
UntypedOpcode(Move, Two, TwoRegister)
UntypedOpcode(Swap, Two, TwoRegister)
UntypedOpcode(PopRegister, Two, TwoRegister)
UntypedOpcode(PushRegister, Two, TwoRegister)
UntypedOpcode(LeaveExecutionLoop, One, NoArguments) // a hack to support returning to native code
UntypedOpcode(PrintString, Two, TwoRegister)        // read two registers to get start and length in memory
UntypedOpcode(PrintChar, Two, OneRegister)          // print a character stored in a register
UntypedOpcode(TypeDatum, Two, OneRegister)          // print the register with all of its contents
