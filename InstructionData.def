// The variant layout is modeled into the bit pattern
// the lowest four bits are the instruction width [variant] (maximum of 16 different widths, not 1-16 but variable based off of need)
// the remaining layout is dependent on the variant id
// code 0: OneByte [ variant:3 | op: 5 ] // maximum of 32 ops in this class
// code 1: TwoByte [ variant:3 | kind: 1 | group: 3 | control: 8] // multiple layouts
//          OneRegister [ variant:3 | kind: 1 [is zero] | op: 8 | dest: 4 ]
//          TwoRegister [ variant:3 | kind: 1 [is one] | op: 3 | dest: 4 | src: 4 ] // not as many allowed here
// code 2: ThreeByte [ variant:3 | kind: 2 | control:18 ]
//          ThreeRegister [ variant:3 [2] | kind: 2 [0] | op: 6 | dest: 4 | src0: 4 | src1: 4] 
//          FourRegister  [ variant:3 [2] | kind: 2 [1] | op: 3 | dest: 4 | src0: 4 | src1: 4 | src2: 4] // compact version
//          SignedImm16   [ variant:3 [2] | kind: 2 [2] | op: 3 | imm16 ] 
// code 3: FourByte [ variant:3 | kind:2 | control: 27 ]
//          FiveRegister         [ variant:3 [3] | kind: 2 [0] | op: 7 | dest: 4 | src0: 4 | src1: 4 | src2: 4 | src3: 4 ]
//          Immediate24          [ variant:3 [3] | kind: 2 [1] | op: 3 | imm24] 
//          OneRegisterWithImm16 [ variant:3 [3] | kind: 2 [2] | op: 7  | dest: 4 | imm16 ]
// code 4: FiveByte [ variant:3 | kind:2 | control: 35 ]
//         TwoRegisterWithImm16 [ variant: 3 [4] | kind:2 [0] | op: 6 | unused: 5 | dest:4 | src0:4 | imm16 ]
// code 5: 

UntypedOpcode(Nop, One, NoArguments)
TypedOpcode(Add, Three, ThreeRegister, Number)
TypedOpcode(Subtract, Three, ThreeRegister, Number)
TypedOpcode(Multiply, Three, ThreeRegister, Number)
TypedOpcode(Divide, Three, ThreeRegister, Number)
TypedOpcode(Modulo, Three, ThreeRegister, Number)
TypedOpcode(Not, Three, TwoRegister, Number)
TypedOpcode(Minus, Three, TwoRegister, Number)
TypedOpcode(And, Three, ThreeRegister, Number)
TypedOpcode(Or, Three, ThreeRegister, Number)
TypedOpcode(GreaterThan, Three, ThreeRegister, Number)
TypedOpcode(LessThan, Three, ThreeRegister, Number)
TypedOpcode(Xor, Three, ThreeRegister, Number)
TypedOpcode(ShiftRight, Three, ThreeRegister, Number)
TypedOpcode(ShiftLeft, Three, ThreeRegister, Number)
TypedOpcode(Equals, Three, ThreeRegister, Number)
TypedOpcode(Pow, Three, ThreeRegister, Number)
//TypedOpcode(AddUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(SubtractUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(MultiplyUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(DivideUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(ModuloUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(NotUnsigned, Two, TwoRegister, MemoryAddress)
//TypedOpcode(MinusUnsigned, Two, TwoRegister, MemoryAddress)
//TypedOpcode(AndUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(OrUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(GreaterThanUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(LessThanUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(XorUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(ShiftRightUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(ShiftLeftUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(EqualsUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(PowUnsigned, Three, ThreeRegister, MemoryAddress)
//TypedOpcode(FloatingPointAdd, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointSubtract, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointMultiply, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointDivide, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointMinus, Two, TwoRegister, FloatingPoint)
//TypedOpcode(FloatingPointGreaterThan, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointLessThan, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointEquals, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(FloatingPointPow, Three, ThreeRegister, FloatingPoint)
//TypedOpcode(NotBoolean, Two, TwoRegister, Boolean)
//TypedOpcode(AndBoolean, Three, ThreeRegister, Boolean)
//TypedOpcode(OrBoolean, Three, ThreeRegister, Boolean)
//TypedOpcode(XorBoolean, Three, ThreeRegister, Boolean)
//TypedOpcode(EqualsBoolean, Three, ThreeRegister, Boolean)
TypedOpcode(AddImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(SubtractImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(MultiplyImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(DivideImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(ModuloImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(AndImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(OrImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(GreaterThanImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(LessThanImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(XorImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(ShiftRightImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(ShiftLeftImmediate, Five, TwoRegisterWithImm16, Number)
TypedOpcode(EqualsImmediate, Five, TwoRegisterWithImm16, Number)
//TypedOpcode(UnsignedAddImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedSubtractImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedMultiplyImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedDivideImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedModuloImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedAndImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedOrImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedGreaterThanImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedLessThanImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedXorImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedShiftRightImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedShiftLeftImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
//TypedOpcode(UnsignedEqualsImmediate, Four, TwoRegisterWithImm16, MemoryAddress)
TypedOpcode(TypeValue, Two, OneRegister, Number)
//TypedOpcode(UnsignedTypeValue, Two, OneRegister, MemoryAddress)
//TypedOpcode(FloatingPointTypeValue, Two, OneRegister, FloatingPoint)
//TypedOpcode(BooleanTypeValue, Two, OneRegister, Boolean)
UntypedOpcode(Jump, Three, SignedImm16)
UntypedOpcode(JumpIndirect, Two, TwoRegister)
UntypedOpcode(JumpAbsolute, Four, Imm24)
UntypedOpcode(CallSubroutine, Three, SignedImm16)
UntypedOpcode(CallSubroutineIndirect, Two, OneRegister)
UntypedOpcode(ReturnSubroutine, One, NoArguments)
UntypedOpcode(ConditionalBranch, Four, OneRegisterWithImm16)
UntypedOpcode(ConditionalBranchIndirect, Two, TwoRegister)
UntypedOpcode(ConditionalCallSubroutine, Four, OneRegisterWithImm16)
UntypedOpcode(ConditionalCallSubroutineIndirect, Two, TwoRegister)
UntypedOpcode(ConditionalReturnSubroutine, Two, OneRegister)
// type field manipulation
UntypedOpcode(DecodeBits, Three, FourRegister)
UntypedOpcode(EncodeBits, Four, FiveRegister)
//UntypedOpcode(LoadHalfAddress, Two, TwoRegister)
//UntypedOpcode(LoadQuarterAddress, Two, TwoRegister)
//UntypedOpcode(LoadByte, Two, TwoRegister)
//UntypedOpcode(StoreByte, Two, TwoRegister)
//UntypedOpcode(StoreHalfAddress, Two, TwoRegister)
//UntypedOpcode(StoreQuarterAddress, Two, TwoRegister)
UntypedOpcode(Load, Two, TwoRegister)
UntypedOpcode(Store, Two, TwoRegister)
UntypedOpcode(LoadImmediate16, Four, OneRegisterWithImm16)
UntypedOpcode(LoadImmediate32, Six, OneRegisterWithImm32)
UntypedOpcode(LoadImmediate48, Eight, LoadImm48)
UntypedOpcode(LoadImmediate64, Ten, LoadImm64)
UntypedOpcode(Move, Two, TwoRegister)
UntypedOpcode(Swap, Two, TwoRegister)
UntypedOpcode(PopRegister, Two, TwoRegister)
UntypedOpcode(PushRegister, Two, TwoRegister)
UntypedOpcode(LeaveExecutionLoop, One, NoArguments) // a hack to support returning to native code
UntypedOpcode(PrintString, Two, TwoRegister)        // read two registers to get start and length in memory
UntypedOpcode(PrintChar, Two, OneRegister)          // print a character stored in a register
UntypedOpcode(TypeDatum, Two, OneRegister)          // print the register with all of its contents
